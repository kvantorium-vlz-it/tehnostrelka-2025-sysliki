// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
model User { 
  id         Int      @unique 
  name       String? 
  created_at DateTime @default(now()) 
 
  route      Route[] 
  coments    Coments[] 
  rating     Rating[] 
  auditLog   AuditLog[] 
  moder      Moder[] 
  visited    Visited[]
  user_admin UserAdmin? 
} 
 
model UserAdmin { 
  id      Int @id @default(autoincrement()) 
  user_id Int @unique 
 
  user User @relation(fields: [user_id], references: [id],onDelete: Cascade) 
} 
 
model Route { 
  id          Int       @id @default(autoincrement()) 
  creater_id  Int 
  name        String 
  descripsion String 
  created_at  DateTime  @default(now()) 
  updated_at  DateTime? 
  private     Boolean 
  approved    Boolean? 
 
  user User @relation(fields: [creater_id], references: [id]) 
 
  roulte_place RoultePlace[] 
  route_image RouteImage[] 
  moder       Moder[] 
  coments     Coments[] 
  rating      Rating[] 
  // auditLog    AuditLog[] 
  visited     Visited[]
  city        City? 
} 
 
model RoultePlace { 
  id          Int     @id @default(autoincrement()) 
  name        String? 
  description String? 
  routed_id   Int 
  lat         Float 
  lot         Float 
 
  route Route @relation(fields: [routed_id], references: [id],onDelete: Cascade) 
 
  route_place_image RoutePlaceImage[] 
  // auditLog          AuditLog[] 
} 
 
model RoutePlaceImage { 
  id             Int @id @default(autoincrement()) 
  image_id       Int @unique 
  route_place_id Int 
 
  route_place RoultePlace @relation(fields: [route_place_id], references: [id],onDelete: Cascade) 
  image       Image       @relation(fields: [image_id], references: [id]) 
} 
 
model Image { 
  id  Int     @id @default(autoincrement()) 
  alt String? 
  src String 
 
  route_place_image RoutePlaceImage? 
  route_image       RouteImage? 
  // auditLog          AuditLog[] 
} 
 
model RouteImage { 
  id       Int @id @default(autoincrement()) 
  route_id Int 
  image_id Int @unique 
 
  route Route @relation(fields: [route_id], references: [id],onDelete: Cascade) 
  image Image @relation(fields: [image_id], references: [id]) 
} 
 
model Moder { 
  id       Int @id @default(autoincrement()) 
  route_id Int 
  user_id  Int 
 
  route Route @relation(fields: [route_id], references: [id],onDelete: Cascade) 
  user  User  @relation(fields: [user_id], references: [id]) 
} 
 
model Coments { //надо периписать на Coment
  id         Int      @id @default(autoincrement()) 
  route_id   Int 
  text       String 
  user_id    Int 
  created_at DateTime @default(now())
 
  route Route @relation(fields: [route_id], references: [id],onDelete: Cascade) 
  user  User  @relation(fields: [user_id], references: [id]) 
} 
 
model Rating { 
  id       Int @id @default(autoincrement()) 
  route_id Int 
  user_id  Int 
  value    Int 
 
  route Route @relation(fields: [route_id], references: [id],onDelete: Cascade) 
  user  User  @relation(fields: [user_id], references: [id]) 
} 
 
model Visited { 
  id         Int      @id @default(autoincrement()) 
  route_id   Int      
  user_id    Int       
  visited_at DateTime @default(now())
 
  route Route @relation(fields: [route_id], references: [id], onDelete: Cascade) 
  user  User  @relation(fields: [user_id], references: [id]) 
} 
 
model City { 
  id       Int    @id @default(autoincrement()) 
  name     String 
  route_id Int    @unique 
 
  route Route @relation(fields: [route_id], references: [id],onDelete: Cascade) 
} 
 
model AuditLog { 
  id         Int      @id @default(autoincrement()) 
  table_name String 
  record_id  Int 
  creater_id Int // Пользователь, внесший изменения 
  operation  String // INSERT, UPDATE, DELETE 
  old_data   Json? // Данные до изменения 
  new_data   Json? // Данные после изменения 
  changed_at DateTime @default(now()) 
 
  user         User        @relation(fields: [creater_id], references: [id]) 
  // route        Route       @relation(fields: [record_id], references: [id],onDelete: Cascade) 
  // image        Image       @relation(fields: [record_id], references: [id],onDelete: Cascade) 
  // roulte_place RoultePlace @relation(fields: [record_id], references: [id],onDelete: Cascade) 
}